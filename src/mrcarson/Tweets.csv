Endlich: ein #Cheatsheet zu Flow Design;http://refactoring-legacy-code.net/cheatsheet-flow-design/Wandelbarkeit statt Legacy Code;http://refactoring-legacy-code.net/cheatsheet-flow-design/Softwareentwurf mit Flow Design;http://refactoring-legacy-code.net/cheatsheet-flow-design/Alle Symbole von Flow Design erklärt;http://refactoring-legacy-code.net/cheatsheet-flow-design/Übersetzung von Flow Design nach C#;http://refactoring-legacy-code.net/cheatsheet-flow-design/Onlinekurs zum Thema Testen von .NET Anwendungen;http://refactoring-legacy-code.net/onlinekurs-automatisiertes-testen-von-net-anwendungen/Automatisiertes Testen ist 'best practice';http://refactoring-legacy-code.net/onlinekurs-automatisiertes-testen-von-net-anwendungen/Probleme mit .NET Unit Tests?;http://refactoring-legacy-code.net/onlinekurs-automatisiertes-testen-von-net-anwendungen/Korrektheit von .NET Anwendungen;http://refactoring-legacy-code.net/onlinekurs-automatisiertes-testen-von-net-anwendungen/Digitalnomaden lernen ortsunabhängig: .NET Unit Tests;http://refactoring-legacy-code.net/onlinekurs-automatisiertes-testen-von-net-anwendungen/Bei .NET Core läuft noch nicht alles rund;http://refactoring-legacy-code.net/unit-tests-mit-net-core/Unit Tests mit .NET Core: für Microsoft nicht wichtig?;http://refactoring-legacy-code.net/unit-tests-mit-net-core/Nunit, xUnit und MSTest unter .NET Core: so geht's!;http://refactoring-legacy-code.net/unit-tests-mit-net-core/Testen von .NET Core Anwendungen;http://refactoring-legacy-code.net/unit-tests-mit-net-core/project.json für .NET Core Unit Tests;http://refactoring-legacy-code.net/unit-tests-mit-net-core/Video zum Vortrag 'Refactoring Legacy Code' vom HerbstCampus;http://refactoring-legacy-code.net/video-refactoring-legacy-code-herbstcampus-2016/Refactoring Legacy Code mit der #mikadomethod;http://refactoring-legacy-code.net/video-refactoring-legacy-code-herbstcampus-2016/Vortrag vom HerbstCampus zu #refactoring jetzt online;http://refactoring-legacy-code.net/video-refactoring-legacy-code-herbstcampus-2016/Einfache vs. Komplexe Refactorings: was ist der Unterschied?;http://refactoring-legacy-code.net/video-refactoring-legacy-code-herbstcampus-2016/Umgang mit Legacy Code in 3 Schritten;http://refactoring-legacy-code.net/video-refactoring-legacy-code-herbstcampus-2016/.NET GUI Testen: gewusst wie;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-gui/GUI Tests unter .NET;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-gui/Testen der grafischen Benutzerschnittstelle unter .NET;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-gui/Automatisiertes Testen der MVVM Gui;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-gui/Herausforderung UI Tests;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-gui/Dateizugriffe in .NET Anwendungen automatisiert Testen;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-ressourcen/Wenn Ressourcenzugriffe das Testen erschweren;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-ressourcen/Das automatisierte Testen von Ressourcenzugriffen unter .NET;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-ressourcen/Knifflig: Ressourcenzugriffe testen unter .NET;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-ressourcen/Wenn Aspekte nicht getrennt sind: Ressourcentests unter .NET;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-ressourcen/Refactoring mit der #mikadomethod;http://refactoring-legacy-code.net/video-mikado-methode-ablauf/#video erklärt die Mikado Methode für komplexe Refactorings;http://refactoring-legacy-code.net/video-mikado-methode-ablauf/Komplexe Refactorings angehen mit der #mikadomethode;http://refactoring-legacy-code.net/video-mikado-methode-ablauf/Von #legacycode zu #cleancode mit der #mikadomethod;http://refactoring-legacy-code.net/video-mikado-methode-ablauf/Der Clean Code Developer empfiehlt: die #mikadomethod;http://refactoring-legacy-code.net/video-mikado-methode-ablauf/.NET Events testen;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-events/Wie teste ich Events unter .NET?;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-events/Knifflige Fälle beim Testen: .NET Events;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-events/Auch events müssen automatisiert getestet werden;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-events/Herausforderung .NET Events: wie testen?;http://refactoring-legacy-code.net/die-kniffligen-faelle-beim-testen-events/Komplexe Refactorings sind wie Mikado spielen;http://refactoring-legacy-code.net/video-komplexe-refactorings-mikado-methode/Wenn Ihnen das komplexe Refactoring mal wieder um die Ohren fliegt;http://refactoring-legacy-code.net/video-komplexe-refactorings-mikado-methode/Finger weg von komplexen Refactorings?;http://refactoring-legacy-code.net/video-komplexe-refactorings-mikado-methode/Video zu komplexen Refactorings;http://refactoring-legacy-code.net/video-komplexe-refactorings-mikado-methode/Legacy Code aufräumen durch komplexe Refactorings;http://refactoring-legacy-code.net/video-komplexe-refactorings-mikado-methode/